/**
 * Project Euler challenges
 * https://projecteuler.net
 */
class ProjectEuler {
  /**
   * Problem 001
   *
   * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
   * Find the sum of all the multiples of 3 or 5 below 1000.
   *
   * @param {number} limit The upper limit to check
   * @return {number} The sum of the multiples
   */
  problem001 (limit) {
    let x = 0;
    let sum = 0;

    while (x < limit) {
      if (x %  3 === 0 || x % 5 === 0) {
        sum += x;
      }

      x++;
    }

    return sum;
  }

  /**
   * Problem 002
   *
   * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
   * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
   * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
   *
   * @param {number} sum The sum of the fibonacci sequence
   * @param {Array<number>} stack The stack containing the fibonacci sequence
   * @param {number} cnt The number to start at
   * @return {number} The sum of the even valued terms
   */
  problem002 (sum, stack, cnt) {
    const recurse = (sum, stack, cnt) => {
      stack[cnt] = stack[cnt - 1] + stack[cnt - 2];

      if (stack[cnt] > 4000000) {
        return sum;
      }

      if(stack[cnt] % 2 === 0) {
        sum += stack[cnt];
      }

      cnt++;

      return recurse(sum, stack, cnt);
    };

    return recurse(sum, stack, cnt);
  }

  /**
   * Problem 003
   *
   * The prime factors of 13195 are 5, 7, 13 and 29.
   * What is the largest prime factor of the number 600851475143 ?
   *
   * @param {number} limit The limit to check up to
   * @param {number} cnt The start point for counting
   * @return {number} The largest prime
   */
  problem003 (limit, cnt = 2) {
    while(cnt < limit) {
      while(limit % cnt === 0) {
        ((x) => {
          limit = x;
        }) (limit / cnt);
      }

      cnt++;
    }

    return limit;
  }

  /**
   * Problem 004
   *
   * A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
   * Find the largest palindrome made from the product of two 3-digit numbers.
   *
   * @param {number} x The first number
   * @param {number} y The second number
   * @param {number} limit The limit to check under
   * @return {number} The highest palindrome under the limit
   */
  problem004 (x, y, limit) {
    let highest = 0;

    while (x < limit) {
      while (y < limit) {
        let palindrome = (x * y).toString();
        let reverse = palindrome.split('').reverse().join('');

        if (palindrome === reverse && parseInt(palindrome) > parseInt(highest)) highest = palindrome;

        y++;
      }
      x++;
      y = 100;
    }

    return parseInt(highest, 10);
  }

  /**
   * Problem 006
   *
   * The sum of the squares of the first ten natural numbers is,
   *
   * 12 + 22 + ... + 102 = 385
   * The square of the sum of the first ten natural numbers is,
   *
   * (1 + 2 + ... + 10)2 = 552 = 3025
   * Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 - 385 = 2640.
   *
   * Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
   *
   * @param {number} limit The number to check
   * @return {number} The difference between the sum squared and squared sum
   */
  problem006 (limit) {
    let x = 0;
    let y = 0;

    for (let i = 1; i < limit + 1; i++) {
      x += i * i;
      y += i;
    }

    y *= y;

    return y - x;
  }

  /**
   * Problem 007
   *
   * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
   * What is the 10 001st prime number?
   *
   * @param {number} limit The n'th number to find
   * @param {number} num Position to start counting from
   * @param {Array<number>} stack The stack of prime numbers found
   * @return {number} The nth prime number
   */
  problem007 (limit, num, stack = [2, 3]) {
    while(stack.length < limit) {
      let isPrime = true;

      stack.forEach(item => {
        if (num % item === 0) isPrime = false;
      });

      if (isPrime) stack.push(num);
      num += 1;
    }

    return stack[limit - 1];
  }
}

export { ProjectEuler }
